// Copyright (c) 2017-2022 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs
      frag: standard-fs
      properties: &props
        vatSpeed:                         { value: 1.0, target: vatAnimParams.x, editor: { displayName: AnimationSpeed } }
        vatNormalIntensity:               { value: 0.5, target: vatAnimParams.y, editor: { displayName: AnimationNormalIntensity, slide: true, range: [0, 1.0], step: 0.001 } }
        vatLoopStartFrame:                { value: 0, target: vatBBMin.w, editor: { parent: USE_LOOP_ANIMATION, displayName: UnusedAnimationLoopStartFrame } }
        vatLoopEndFrame:                  { value: 0, target: vatBBMax.w, editor: { parent: USE_LOOP_ANIMATION, displayName: UnusedAnimationLoopEndFrame } }
        vatFrameCount:                    { value: 0.0, target: vatNoLUTParams.x, editor: { displayName: NumOfFrames } }
        vatLUTTextureWidth:               { value: 0, target: vatLUTParams.x, editor: { parent: USE_LOOKUP_AUTO_FRAME_COUNT, displayName: LUTTextureWidth } }
        vatLUTTextureHeight:              { value: 0, target: vatLUTParams.y, editor: { parent: USE_LOOKUP_AUTO_FRAME_COUNT, displayName: LUTTextureHeight } }
        vatVertexCount:                   { value: 0.0, target: vatLUTParams.z, editor: { parent: USE_LOOKUP_AUTO_FRAME_COUNT, displayName: FBXVertexCount } }
        mainColor:                        { value: [1.0, 1.0, 1.0, 1.0], target: albedo, linear: true, editor: { displayName: Albedo, type: color } }
        albedoScale:                      { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:                   { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST, slide: true, range: [0, 1.0], step: 0.001 } }
        occlusion:                        { value: 0.0, target: pbrParams.x, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        roughness:                        { value: 0.5, target: pbrParams.y, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        metallic:                         { value: 0.0, target: pbrParams.z, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        specularIntensity:                { value: 0.5, target: pbrParams.w, editor: { slide: true, range: [0.0, 1.0], step: 0.001 } }
        emissive:                         { value: [0.0, 0.0, 0.0, 1.0], linear: true, editor: { type: color } }
        emissiveScale:                    { value: [1.0, 1.0, 1.0], target: emissiveScaleParam.xyz }
        normalStrength:                   { value: 1.0, target: emissiveScaleParam.w, editor: { parent: USE_NORMAL_MAP, slide: true, range: [0, 5.0], step: 0.001 } }
        mainTexture:                      { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        normalMap:                        { value: normal }
        pbrMap:                           { value: grey }
        occlusionMap:                     { value: white }
        emissiveMap:                      { value: grey }
        vatPositionMap:                   { value: grey, target: vatPositionTexture, editor: { displayName: PositionMap } }
        vatPosSignMap:                    { value: grey, target: vatPosSignTexture,  editor: { displayName: PosSignMap } }
        vatRotationMap:                   { value: grey, target: vatRotationTexture, editor: { displayName: RotationMap } }
        vatRotSignMap:                    { value: grey, target: vatRotSignTexture,  editor: { displayName: RotSignMap } }
        vatRotAlphaMap:                   { value: grey, target: vatRotAlphaTexture,  editor: { displayName: RotAlphaMap } }
        vatLookupMap:                     { value: grey, target: vatLookupTexture, editor: { parent: USE_LOOKUP_TEXTURE, displayName: LookupMap } }
      rasterizerState:
        cullMode: none
    - &forward-add
      vert: standard-vs
      frag: standard-fs
      phase: forward-add
      propertyIndex: 0
      embeddedMacros: { CC_FORWARD_ADD: true }
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthFunc: equal
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one
          blendSrcAlpha: zero
          blendDstAlpha: one
    - &shadow-caster
      vert: shadow-caster-vs
      frag: shadow-caster-fs
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], target: albedo, editor: { displayName: Albedo, type: color } }
        albedoScale:    { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
    - &reflect-map
      vert: standard-vs
      frag: reflect-map-fs
      phase: reflect-map
      propertyIndex: 0
  - name: transparent
    passes:
    - vert: standard-vs
      frag: standard-fs
      embeddedMacros: { CC_FORCE_FORWARD_SHADING: true }
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - *forward-add
    - *shadow-caster
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 vatAnimParams;
    vec4 vatNoLUTParams;
    vec4 vatLUTParams;
    vec4 vatBBMax;
    vec4 vatBBMin;
    vec4 albedo;
    vec4 albedoScaleAndCutoff;
    vec4 pbrParams;
    vec4 emissive;
    vec4 emissiveScaleParam;
    vec4 anisotropyParam;
  };
}%

CCProgram macro-remapping %{
  // ui displayed macros
  #pragma define-meta HAS_SECOND_UV
  #pragma define-meta USE_TWOSIDE
  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV
  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE

  // depend on UI macros
#if USE_NORMAL_MAP
  #define CC_SURFACES_USE_TANGENT_SPACE 1
#endif
}%

CCProgram surface-vertex %{
  #include <common/math/transform>
  #include <common/math/number>
  #include <common/texture/texture-misc>
  #include <common/mesh/vat-animation>

  // 流体错误效果调试：
    // numFrameCount不对会导致面破碎甚至有些面错乱，但选用第一帧动画的话，就可以屏蔽掉它的干扰，可以由此检测是否是该问题
    // LUT png RGBA/BGRA的通道反转会导致面全部聚成一团（或一个长条形）
    // uv0的y必须是0到1/frameCount之间的，如果很大就说明需要反转V轴（uv0.y = 1-uv0.y），表现为动画大致框架正常但是一样会混成一坨
    // 图片sampler状态linear会抖甚至会有穿插的乱面，最好用point, 另外就是绝对不能开fix alpha transparency artifacts
  // 导出：
    // 按Unity导出而非UE，否则fbx轴向会变，导致动画错乱，另外单位也比UE要小，缩放就不是1/100
    // 导出不要选paddle合图功能，没啥用，activePixelsRatioX/Y是用于计算paddle的
    // 导出要选LDR，这样precisionValue数据精度就是255而非2048，另外Position图不能选两张，normal也不支持pack到LUT和Pos图的a通道中
    // 导出记录好frameCount，或用顶点数和LUT分辨率自动计算
  // UE Shader Graph说明:
    // thisFramePos = (A*10.0-B*10.0) * thisFramePos + A;
    // UE提供的是worldoffset，所以需要减worldtransform后的a_position，此处并不需要

  uniform highp sampler2D vatPositionTexture;
  uniform highp sampler2D vatPosSignTexture;
  uniform highp sampler2D vatRotationTexture;
  uniform highp sampler2D vatRotSignTexture;
  uniform highp sampler2D vatRotAlphaTexture;
  #if USE_LOOKUP_TEXTURE
    uniform highp sampler2D vatLookupTexture;
  #endif
  
  #define CC_SURFACES_VERTEX_MODIFY_LOCAL_POS
  vec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)
  {
    vec3 pos = In.position.xyz;

    vec2 originUV = In.texCoord, thisFrameUV, nextFrameUV;
  #if CC_SURFACES_USE_SECOND_UV
    originUV = In.texCoord1;
  #endif

    float numOfFrames = vatNoLUTParams.x, speed = vatAnimParams.x;
    #if USE_LOOKUP_AUTO_FRAME_COUNT
      numOfFrames = VATCalculateFrameCount(vatLUTParams.xy, vatLUTParams.z);
    #endif

    float frameLerp = VATGetAnimUV(thisFrameUV, nextFrameUV, originUV, numOfFrames, speed, cc_time.x
    #if USE_LOOKUP_TEXTURE
    , vatLookupTexture
    #endif
    );

    pos = VATGetLocalPosition(thisFrameUV
  #if USE_SMOOTH_ANIMATION
    , nextFrameUV, frameLerp
  #endif
    , vatPositionTexture, vatPosSignTexture);
    return pos;
  }

  #define CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL
  vec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)
  {
    vec3 normal = In.normal.xyz;

    vec2 originUV = In.texCoord, thisFrameUV, nextFrameUV;
  #if CC_SURFACES_USE_SECOND_UV
    originUV = In.texCoord1;
  #endif

    float numOfFrames = vatNoLUTParams.x, speed = vatAnimParams.x;
    #if USE_LOOKUP_AUTO_FRAME_COUNT
      numOfFrames = VATCalculateFrameCount(vatLUTParams.xy, vatLUTParams.z);
    #endif

    float frameLerp = VATGetAnimUV(thisFrameUV, nextFrameUV, originUV, numOfFrames, speed, cc_time.x
    #if USE_LOOKUP_TEXTURE
    , vatLookupTexture
    #endif
    );

    normal = VATGetLocalNormal(vec3(0.0, 1.0, 0.0), thisFrameUV
  #if USE_SMOOTH_ANIMATION
    , nextFrameUV, frameLerp
  #endif
    , vatRotationTexture, vatRotSignTexture, vatRotAlphaTexture);

    normal = mix(In.normal.xyz, normal, vec3(vatAnimParams.y));
    return normalize(normal);
  }
}%

CCProgram surface-fragment %{
  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif
  #if USE_NORMAL_MAP
    uniform sampler2D normalMap;
    uniform sampler2D normalMapDetailed;
    #pragma define-meta NORMAL_UV options([v_uv, v_uv1])
  #endif
  #pragma define-meta DEFAULT_UV options([v_uv, v_uv1])
  #if USE_PBR_MAP
    uniform sampler2D pbrMap;
  #endif
  #if USE_OCCLUSION_MAP
    uniform sampler2D occlusionMap;
  #endif
  #if USE_EMISSIVE_MAP
    uniform sampler2D emissiveMap;
    #pragma define-meta EMISSIVE_UV options([v_uv, v_uv1])
  #endif

  #pragma define OCCLUSION_CHANNEL          r
  #pragma define ROUGHNESS_CHANNEL          g
  #pragma define METALLIC_CHANNEL           b
  #pragma define SPECULAR_INTENSITY_CHANNEL a

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif


  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY
  vec4 SurfacesFragmentModifyBaseColorAndTransparency()
  {
    vec4 baseColor = albedo;
    
    #if USE_VERTEX_COLOR
      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb); // use linear
      baseColor.a *= FSInput_vertexColor.a;
    #endif

    #if USE_ALBEDO_MAP
      vec4 texColor = texture(albedoMap, ALBEDO_UV);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      baseColor *= texColor;
    #endif

    #if USE_ALPHA_TEST
      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    baseColor.rgb *= albedoScaleAndCutoff.xyz;
    return baseColor;
  }

  #define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY
  void SurfacesFragmentAlphaClipOnly()
  {
    #if USE_ALPHA_TEST
      float alpha = albedo.ALPHA_TEST_CHANNEL;
      #if USE_VERTEX_COLOR
        alpha *= FSInput_vertexColor.a;
      #endif
      #if USE_ALBEDO_MAP
        alpha = texture(albedoMap, ALBEDO_UV).ALPHA_TEST_CHANNEL;
      #endif
  
      if (alpha < albedoScaleAndCutoff.w) discard;
    #endif
  }


  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE
  vec3 SurfacesFragmentModifyEmissive()
  {
    vec3 emissive = emissive.rgb;
    #if USE_EMISSIVE_MAP
      emissive = SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);
    #endif
    return emissive * emissiveScaleParam.xyz;
  }

  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS
  vec4 SurfacesFragmentModifyPBRParams()
  {
    vec4 pbr = pbrParams;
    pbr.x = 1.0;
    #if USE_PBR_MAP
      vec4 res = texture(pbrMap, DEFAULT_UV);
      pbr.x *= res.OCCLUSION_CHANNEL;
      pbr.y *= res.ROUGHNESS_CHANNEL;
      pbr.z *= res.METALLIC_CHANNEL;
      pbr.w *= res.SPECULAR_INTENSITY_CHANNEL;
    #endif
    #if USE_OCCLUSION_MAP
      pbr.x = mix(1.0, texture(occlusionMap, DEFAULT_UV).OCCLUSION_CHANNEL, pbrParams.x);
    #endif

    return pbr;
  }
}%

CCProgram standard-vs %{
  precision highp float;

  // 1. surface internal macros, for technique usage or remapping some user (material) macros to surface internal macros
  #include <macro-remapping>
  #include <surfaces/effect-macros/common-macros>

  // 2. common include with corresponding shader stage, include before surface functions
  #include <surfaces/includes/common-vs>

  // 3. user surface functions that can use user (effect) parameters (ubo Constants)
  //    see surfaces/default-functions/xxx.chunk
  #include <shared-ubos>
  #include <surface-vertex>

  // 4. surface include with corresponding shader stage and shading-model (optional)
  #include <surfaces/includes/standard-vs>

  // 5. shader entry with corresponding shader stage and technique usage/type
  #include <shading-entries/main-functions/render-to-scene/vs>
}%


CCProgram shadow-caster-vs %{
  precision highp float;
  #include <surfaces/effect-macros/render-to-shadowmap>
  #include <surfaces/includes/common-vs>
  #include <shared-ubos>
  #include <surface-vertex>
  #include <shading-entries/main-functions/render-to-shadowmap/vs>
}%



CCProgram standard-fs %{
  // shading-model : standard
  // lighting-model : standard (isotropy / anisotropy pbr)
  // shader stage : fs
  // technique usage/type : render-to-scene

  precision highp float;
  // 1. surface internal macros, for technique usage or remapping some user (material) macros to surface internal macros
  #include <macro-remapping>
  #include <surfaces/effect-macros/common-macros>

  // 2. common include with corresponding shader stage, include before surface functions
  #include <surfaces/includes/common-fs>

  // 3. user surface functions that can use user (effect) parameters (ubo Constants)
  //    see surfaces/default-functions/xxx.chunk
  #include <shared-ubos>
  #include <surface-fragment>

  // 4. lighting-model (optional)
  #include <lighting-models/includes/standard>

  // 5. surface include with corresponding shader stage and shading-model (optional)
  #include <surfaces/includes/standard-fs>

  // 6. shader entry with corresponding shader stage and technique usage/type
  #include <shading-entries/main-functions/render-to-scene/fs>
}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <surfaces/effect-macros/render-to-shadowmap>
  #include <surfaces/includes/common-fs>
  #include <shared-ubos>
  #include <surface-fragment>
  #include <shading-entries/main-functions/render-to-shadowmap/fs>
}%


CCProgram reflect-map-fs %{
  precision highp float;
  #include <macro-remapping>
  #include <surfaces/effect-macros/common-macros>
  #include <surfaces/includes/common-fs>
  #include <shared-ubos>
  #include <surface-fragment>
  #include <lighting-models/includes/standard>
  #include <surfaces/includes/standard-fs>
  #include <shading-entries/main-functions/render-to-reflectmap/fs>
}%
